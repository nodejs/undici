{
	"general.any.js": {
		"fail": [
			"Stream errors once aborted. Underlying connection closed.",
			"Underlying connection is closed when aborting after receiving response - no-cors",
			"Already aborted signal rejects immediately"
		]
	},
	"request-disturbed.any.js": {
		"fail": [
			"Input request used for creating new request became disturbed even if body is not used"
		]
	},
	"response-error-from-stream.any.js": {
		"fail": [
			"ReadableStream start() Error propagates to Response.formData() Promise",
			"ReadableStream pull() Error propagates to Response.formData() Promise"
		]
	},
	"response-consume-empty.any.js": {
		"fail": [
			"Consume response's body as blob",
			"Consume response's body as formData with correct multipart type (error case)",
			"Consume empty FormData response body as text"
		]
	},
	"idlharness.any.js": {
		"fail": [
			"Response interface: operation json(any, optional ResponseInit)",
			"Window interface: operation fetch(RequestInfo, optional RequestInit)"
		]
	},
	"response-clone.any.js": {
		"fail": [
			"Check response clone use structureClone for teed ReadableStreams (ArrayBufferchunk)",
			"Check response clone use structureClone for teed ReadableStreams (DataViewchunk)"
		]
	},
	"request-upload.any.js": {
		"fail": [
			"Fetch with POST with text body on 421 response should be retried once on new connection."	
		]
	},
	"stream-safe-creation.any.js": {
		"fail": [
			"throwing Object.prototype.type accessor should not affect stream creation by 'fetch'",
			"Object.prototype.type accessor returning invalid value should not affect stream creation by 'fetch'",
			"throwing Object.prototype.highWaterMark accessor should not affect stream creation by 'fetch'",
			"Object.prototype.highWaterMark accessor returning invalid value should not affect stream creation by 'fetch'"
		]
	},
	"scheme-blob.sub.any.js": {
		"fail": [
			"Set content type to the empty string for slice with invalid content type",
			"Set content type to the empty string for slice with no content type "
		]
	},
	"header-value-combining.any.js": {
		"fail": [
			"response.headers.get('content-length') expects 0, 0",
			"response.headers.get('double-trouble') expects , ",
			"response.headers.get('foo-test') expects 1, 2, 3",
			"response.headers.get('heya') expects , \\x0B\f, 1, , , 2"
		]
	},
	"integrity.sub.any.js": {
		"fail": [
			"Empty string integrity for opaque response"
		]
	}
}