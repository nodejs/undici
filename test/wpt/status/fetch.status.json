{
	"general.any.js": {
		"flaky": [
			"Already aborted signal rejects immediately",
			"Underlying connection is closed when aborting after receiving response - no-cors",
			"Stream errors once aborted. Underlying connection closed.",
      "Readable stream synchronously cancels with AbortError if aborted before reading",
      "Cross Origin Fetch with non safe range header",
      "Fetch with range header will be sent with Accept-Encoding: identity",
      "Privileged header not allowed for guard type: request-no-cors"
		]
	},
	"request-disturbed.any.js": {
		"fail": [
			"Input request used for creating new request became disturbed even if body is not used"
		]
	},
	"response-error-from-stream.any.js": {
		"fail": [
			"ReadableStream start() Error propagates to Response.formData() Promise",
			"ReadableStream pull() Error propagates to Response.formData() Promise"
		]
	},
	"response-consume-empty.any.js": {
		"fail": [
			"Consume empty FormData response body as text"
		]
	},
	"idlharness.any.js": {
		"flaky": [
			"Window interface: operation fetch(RequestInfo, optional RequestInit)"
		]
	},
	"response-clone.any.js": {
		"fail": [
			"Check response clone use structureClone for teed ReadableStreams (ArrayBufferchunk)",
			"Check response clone use structureClone for teed ReadableStreams (DataViewchunk)"
		]
	},
	"request-upload.any.js": {
		"fail": [
			"Fetch with POST with text body on 421 response should be retried once on new connection."	
		]
	},
	"stream-safe-creation.any.js": {
		"fail": [
			"throwing Object.prototype.type accessor should not affect stream creation by 'fetch'",
			"Object.prototype.type accessor returning invalid value should not affect stream creation by 'fetch'",
			"throwing Object.prototype.highWaterMark accessor should not affect stream creation by 'fetch'",
			"Object.prototype.highWaterMark accessor returning invalid value should not affect stream creation by 'fetch'"
		]
	},
	"header-value-combining.any.js": {
		"fail": [
			"response.headers.get('content-length') expects 0, 0",
			"response.headers.get('foo-test') expects 1, 2, 3",
			"response.headers.get('heya') expects , \\x0B\f, 1, , , 2"
		],
		"flaky": [
			"response.headers.get('content-length') expects 0",
      "response.headers.get('double-trouble') expects , ",
			"response.headers.get('www-authenticate') expects 1, 2, 3, 4"
		]
	},
	"integrity.sub.any.js": {
		"fail": [
			"Empty string integrity for opaque response"
		]
	},
	"request-headers.any.js": {
    "note": "TODO(@KhafraDev): investigate referrer failures",
    "skip": true
	},
	"request-consume.any.js": {
		"fail": [
			"Consume blob response's body as blob"
		]
	},
	"request-consume-empty.any.js": {
		"fail": [
			"Consume empty FormData request body as text"
		]
	},
	"redirect-method.any.js": {
		"fail": [
			"Redirect 303 with TESTING"
		]
	},
	"redirect-location.any.js": {
		"fail": [
			"Redirect 301 in \"manual\" mode without location",
			"Redirect 301 in \"manual\" mode with invalid location",
			"Redirect 301 in \"manual\" mode with data location",
			"Redirect 302 in \"manual\" mode without location",
			"Redirect 302 in \"manual\" mode with invalid location",
			"Redirect 302 in \"manual\" mode with data location",
			"Redirect 303 in \"manual\" mode without location",
			"Redirect 303 in \"manual\" mode with invalid location",
			"Redirect 303 in \"manual\" mode with data location",
			"Redirect 307 in \"manual\" mode without location",
			"Redirect 307 in \"manual\" mode with invalid location",
			"Redirect 307 in \"manual\" mode with data location",
			"Redirect 308 in \"manual\" mode without location",
			"Redirect 308 in \"manual\" mode with invalid location",
			"Redirect 308 in \"manual\" mode with data location"
		]
	},
	"header-values.any.js": {
		"fail": [
			"XMLHttpRequest with value x%00x needs to throw",
			"XMLHttpRequest with value x%0Ax needs to throw",
			"XMLHttpRequest with value x%0Dx needs to throw",
			"XMLHttpRequest with all valid values",
			"fetch() with all valid values"
		]
	},
	"header-values-normalize.any.js": {
		"fail": [
			"XMLHttpRequest with value %00",
			"XMLHttpRequest with value %01",
			"XMLHttpRequest with value %02",
			"XMLHttpRequest with value %03",
			"XMLHttpRequest with value %04",
			"XMLHttpRequest with value %05",
			"XMLHttpRequest with value %06",
			"XMLHttpRequest with value %07",
			"XMLHttpRequest with value %08",
			"XMLHttpRequest with value %09",
			"XMLHttpRequest with value %0A",
			"XMLHttpRequest with value %0D",
			"XMLHttpRequest with value %0E",
			"XMLHttpRequest with value %0F",
			"XMLHttpRequest with value %10",
			"XMLHttpRequest with value %11",
			"XMLHttpRequest with value %12",
			"XMLHttpRequest with value %13",
			"XMLHttpRequest with value %14",
			"XMLHttpRequest with value %15",
			"XMLHttpRequest with value %16",
			"XMLHttpRequest with value %17",
			"XMLHttpRequest with value %18",
			"XMLHttpRequest with value %19",
			"XMLHttpRequest with value %1A",
			"XMLHttpRequest with value %1B",
			"XMLHttpRequest with value %1C",
			"XMLHttpRequest with value %1D",
			"XMLHttpRequest with value %1E",
			"XMLHttpRequest with value %1F",
			"XMLHttpRequest with value %20",
			"fetch() with value %01",
			"fetch() with value %02",
			"fetch() with value %03",
			"fetch() with value %04",
			"fetch() with value %05",
			"fetch() with value %06",
			"fetch() with value %07",
			"fetch() with value %08",
			"fetch() with value %0E",
			"fetch() with value %0F",
			"fetch() with value %10",
			"fetch() with value %11",
			"fetch() with value %12",
			"fetch() with value %13",
			"fetch() with value %14",
			"fetch() with value %15",
			"fetch() with value %16",
			"fetch() with value %17",
			"fetch() with value %18",
			"fetch() with value %19",
			"fetch() with value %1A",
			"fetch() with value %1B",
			"fetch() with value %1C",
			"fetch() with value %1D",
			"fetch() with value %1E",
			"fetch() with value %1F"
		]
	},
	"header-setcookie.any.js": {
		"fail": [
			"Set-Cookie is a forbidden response header"
		]
	},
  "cache.https.any.js": {
    "skip": true
  },
  "conditional-get.any.js": {
    "note": "There is only 1 test and it fails. No point in running it.",
    "skip": true
  },
  "headers-no-cors.any.js": {
    "skip": true
  },
  "cookies.any.js": {
    "fail": [
      "Include mode: 1 cookie",
      "Include mode: 2 cookies",
      "Same-origin mode: 1 cookie",
      "Same-origin mode: 2 cookies"
    ]
  },
  "redirect-location-escape.tentative.any.js": {
    "skip": true
  },
  "fetch.any.js": {
    "skip": true
  },
  "1xx-response.any.js": {
    "note": "TODO(@KhafraDev): investigate",
    "skip": true
  },
  "blob.any.js": {
    "skip": true
  },
  "status.sub.any.js": {
    "note": "undici doesn't implement orb",
    "skip": true
  },
  "nosniff.sub.any.js": {
    "note": "undici doesn't implement orb",
    "skip": true
  },
  "known-mime-type.sub.any.js": {
    "note": "undici doesn't implement orb",
    "skip": true
  },
  "trailing-dot.https.sub.any.js": {
    "note": "undici doesn't implement orb",
    "skip": true
  },
  "fetch.https.sub.any.js": {
    "note": "accessing secure wss url when the websocket server is insecure",
    "skip": true
  },
  "request-cache-reload.any.js": {
    "skip": true
  },
  "request-init-priority.any.js": {
    "note": "undici doesn't implement priority hints, yet(?)",
    "skip": true
  },
  "response-consume-stream.any.js": {
    "fail": [
      "Read blob response's body as readableStream with mode=byob",
      "Read text response's body as readableStream with mode=byob",
      "Read URLSearchParams response's body as readableStream with mode=byob",
      "Read array buffer response's body as readableStream with mode=byob",
      "Read form data response's body as readableStream with mode=byob"
    ]
  },
  "response-stream-with-broken-then.any.js": {
    "note": "TODO(@KhafraDev): either requires primordials or a bug in node core",
    "skip": true
  },
  "api-and-duplicate-headers.any.js": {
    "fail": [
      "XMLHttpRequest and duplicate Content-Length/Content-Type headers",
      "fetch() and duplicate Content-Length/Content-Type headers"
    ]
  },
  "fetch.https.any.js": {
    "note": "no cross origin protection",
    "skip": true
  },
  "304-update.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "cache-mode.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "cc-request.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "credentials.tentative.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "freshness.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "heuristic.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "invalidate.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "partial.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "post-patch.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "status.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "vary.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "fetch-preflight.https.sub.any.js": {
    "note": "no preflight",
    "skip": true
  },
  "content-range.sub.any.js": {
    "note": "no range header support",
    "skip": true
  },
  "mode-no-cors.sub.any.js": {
    "note": "no cors",
    "skip": true
  },
  "mode-same-origin.any.js": {
    "note": "TODO(@KhafraDev): we implement same origin checks, check why this test fails",
    "skip": true
  },
  "referrer.any.js": {
    "note": "TODO(@KhafraDev): should probably work?",
    "skip": true
  },
  "request-forbidden-headers.any.js": {
    "note": "no forbidden headers",
    "skip": true
  },
  "request-referrer.any.js": {
    "note": "TODO(@KhafraDev): referrer",
    "skip": true
  },
  "request-upload.h2.any.js": {
    "note": "no http2 support",
    "skip": true
  },
  "status.h2.any.js": {
    "note": "no http2 support",
    "skip": true
  },
  "cors-basic.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-cookies-redirect.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-cookies.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-expose-star.sub.any.js": {
    "note": "no cors",
    "skip": true
  },
  "redirect-referrer.any.js": {
    "note": "TODO(@KhafraDev): investigate referrer failures",
    "skip": true
  },
  "redirect-upload.h2.any.js": {
    "note": "no http2 support",
    "skip": true
  },
  "request-cache-default-conditional.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "request-cache-default.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "request-cache-force-cache.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "request-cache-no-cache.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "request-cache-no-store.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "request-cache-only-if-cached.any.js": {
    "note": "no http cache",
    "skip": true
  },
  "authentication-basic.any.js": {
    "note": "TODO(@KhafraDev): investigate",
    "skip": true
  },
  "authentication-redirection.any.js": {
    "note": "connects to https server",
    "fail": [
      "getAuthorizationHeaderValue - cross origin redirection"
    ]
  },
  "redirect-empty-location.any.js": {
    "note": "TODO(@KhafraDev): investigate",
    "skip": true
  },
  "redirect-mode.any.js": {
    "note": "mode isn't respected",
    "skip": true
  },
  "redirect-origin.any.js": {
    "note": "TODO(@KhafraDev): investigate",
    "skip": true
  },
  "redirect-referrer-override.any.js": {
    "note": "TODO(@KhafraDev): investigate",
    "skip": true
  },
  "cors-filtering.sub.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-multiple-origins.sub.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-no-preflight.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-origin.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-referrer.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-response-validation.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-star.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-status.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-redirect-credentials.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-redirect-preflight.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-redirect.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-cache.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-not-cors-safelisted.any.js": {
    "note": "no cors",
    "skip": true
  },
  "cors-preflight-redirect.any.js": {
    "note": "no cors",
    "skip": true
  }
}
