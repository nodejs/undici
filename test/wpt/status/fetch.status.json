{
	"general.any.js": {
		"fail": [
			"Stream errors once aborted. Underlying connection closed.",
			"Underlying connection is closed when aborting after receiving response - no-cors",
			"Already aborted signal rejects immediately"
		]
	},
	"request-disturbed.any.js": {
		"fail": [
			"Input request used for creating new request became disturbed even if body is not used"
		]
	},
	"response-error-from-stream.any.js": {
		"fail": [
			"ReadableStream start() Error propagates to Response.formData() Promise",
			"ReadableStream pull() Error propagates to Response.formData() Promise"
		]
	},
	"response-consume-empty.any.js": {
		"fail": [
			"Consume response's body as blob",
			"Consume response's body as formData with correct multipart type (error case)",
			"Consume empty FormData response body as text"
		]
	},
	"idlharness.any.js": {
		"fail": [
			"Response interface: operation json(any, optional ResponseInit)",
			"Window interface: operation fetch(RequestInfo, optional RequestInit)"
		]
	},
	"response-clone.any.js": {
		"fail": [
			"Check response clone use structureClone for teed ReadableStreams (ArrayBufferchunk)",
			"Check response clone use structureClone for teed ReadableStreams (DataViewchunk)"
		]
	},
	"request-upload.any.js": {
		"fail": [
			"Fetch with POST with text body on 421 response should be retried once on new connection."	
		]
	},
	"stream-safe-creation.any.js": {
		"fail": [
			"throwing Object.prototype.type accessor should not affect stream creation by 'fetch'",
			"Object.prototype.type accessor returning invalid value should not affect stream creation by 'fetch'",
			"throwing Object.prototype.highWaterMark accessor should not affect stream creation by 'fetch'",
			"Object.prototype.highWaterMark accessor returning invalid value should not affect stream creation by 'fetch'"
		]
	},
	"scheme-blob.sub.any.js": {
		"fail": [
			"Set content type to the empty string for slice with invalid content type",
			"Set content type to the empty string for slice with no content type "
		]
	},
	"header-value-combining.any.js": {
		"fail": [
			"response.headers.get('content-length') expects 0, 0",
			"response.headers.get('double-trouble') expects , ",
			"response.headers.get('foo-test') expects 1, 2, 3",
			"response.headers.get('heya') expects , \\x0B\f, 1, , , 2"
		],
		"flaky": [
			"response.headers.get('content-length') expects 0",
			"response.headers.get('www-authenticate') expects 1, 2, 3, 4"
		]
	},
	"integrity.sub.any.js": {
		"fail": [
			"Empty string integrity for opaque response"
		]
	},
	"request-headers.any.js": {
		"fail": [
			"Adding invalid request header \"Accept-Charset: KO\"",
			"Adding invalid request header \"accept-charset: KO\"",
			"Adding invalid request header \"ACCEPT-ENCODING: KO\"",
			"Adding invalid request header \"Accept-Encoding: KO\"",
			"Adding invalid request header \"Access-Control-Request-Headers: KO\"",
			"Adding invalid request header \"Access-Control-Request-Method: KO\"",
			"Adding invalid request header \"Connection: KO\"",
			"Adding invalid request header \"Content-Length: KO\"",
			"Adding invalid request header \"Cookie: KO\"",
			"Adding invalid request header \"Cookie2: KO\"",
			"Adding invalid request header \"Date: KO\"",
			"Adding invalid request header \"DNT: KO\"",
			"Adding invalid request header \"Expect: KO\"",
			"Adding invalid request header \"Host: KO\"",
			"Adding invalid request header \"Keep-Alive: KO\"",
			"Adding invalid request header \"Origin: KO\"",
			"Adding invalid request header \"Referer: KO\"",
			"Adding invalid request header \"Set-Cookie: KO\"",
			"Adding invalid request header \"TE: KO\"",
			"Adding invalid request header \"Trailer: KO\"",
			"Adding invalid request header \"Transfer-Encoding: KO\"",
			"Adding invalid request header \"Upgrade: KO\"",
			"Adding invalid request header \"Via: KO\"",
			"Adding invalid request header \"Proxy-: KO\"",
			"Adding invalid request header \"proxy-a: KO\"",
			"Adding invalid request header \"Sec-: KO\"",
			"Adding invalid request header \"sec-b: KO\"",
			"Adding invalid no-cors request header \"Content-Type: KO\"",
			"Adding invalid no-cors request header \"Potato: KO\"",
			"Adding invalid no-cors request header \"proxy: KO\"",
			"Adding invalid no-cors request header \"proxya: KO\"",
			"Adding invalid no-cors request header \"sec: KO\"",
			"Adding invalid no-cors request header \"secb: KO\"",
			"Check that request constructor is filtering headers provided as init parameter",
			"Check that no-cors request constructor is filtering headers provided as init parameter",
			"Check that no-cors request constructor is filtering headers provided as part of request parameter"
		]
	},
	"request-consume.any.js": {
		"fail": [
			"Consume String request's body as blob",
			"Consume ArrayBuffer request's body as blob",
			"Consume Uint8Array request's body as blob",
			"Consume Int8Array request's body as blob",
			"Consume Float32Array request's body as blob",
			"Consume DataView request's body as blob",
			"Consume blob response's body as blob",
			"Consume blob response's body as blob (empty blob as input)"
		]
	},
	"request-consume-empty.any.js": {
		"fail": [
			"Consume request's body as blob",
			"Consume empty FormData request body as text"
		]
	},
	"redirect-method.any.js": {
		"fail": [
			"Redirect 303 with TESTING"
		]
	},
	"redirect-location.any.js": {
		"fail": [
			"Redirect 301 in \"manual\" mode without location",
			"Redirect 301 in \"manual\" mode with invalid location",
			"Redirect 301 in \"manual\" mode with data location",
			"Redirect 302 in \"manual\" mode without location",
			"Redirect 302 in \"manual\" mode with invalid location",
			"Redirect 302 in \"manual\" mode with data location",
			"Redirect 303 in \"manual\" mode without location",
			"Redirect 303 in \"manual\" mode with invalid location",
			"Redirect 303 in \"manual\" mode with data location",
			"Redirect 307 in \"manual\" mode without location",
			"Redirect 307 in \"manual\" mode with invalid location",
			"Redirect 307 in \"manual\" mode with data location",
			"Redirect 308 in \"manual\" mode without location",
			"Redirect 308 in \"manual\" mode with invalid location",
			"Redirect 308 in \"manual\" mode with data location"
		]
	},
	"header-values.any.js": {
		"fail": [
			"XMLHttpRequest with value x%00x needs to throw",
			"XMLHttpRequest with value x%0Ax needs to throw",
			"XMLHttpRequest with value x%0Dx needs to throw",
			"XMLHttpRequest with all valid values",
			"fetch() with all valid values"
		]
	}
}