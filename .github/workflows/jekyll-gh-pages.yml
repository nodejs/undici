# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
class BrainfuckInterpreter {
  constructor(code) {
    this.code = code;
    this.memory = new Array(30000).fill(0); // หน่วยความจำขนาด 30,000 ช่อง
    this.pointer = 0; // ตัวชี้ตำแหน่งหน่วยความจำ
    this.codePointer = 0; // ตัวชี้ตำแหน่งโค้ด
    this.input = ''; // สำหรับรับ input (ยังไม่ใช้งานในตัวอย่างนี้)
    this.output = ''; // สำหรับเก็บ output
    this.loopStack = []; // สำหรับจัดการ loop
  }

  run() {
    while (this.codePointer < this.code.length) {
      const instruction = this.code[this.codePointer];

      switch (instruction) {
        case '+':
          this.memory[this.pointer]++;
          break;
        case '-':
          this.memory[this.pointer]--;
          break;
        case '>':
          this.pointer++;
          break;
        case '<':
          this.pointer--;
          break;
        case '.':
          this.output += String.fromCharCode(this.memory[this.pointer] % 256);
          break;
        case ',':
          // รอรับ input (ยังไม่ได้ implement)
          break;
        case '[':
          if (this.memory[this.pointer] === 0) {
            let openCount = 1;
            while (openCount > 0) {
              this.codePointer++;
              if (this.codePointer >= this.code.length) break;
              if (this.code[this.codePointer] === '[') openCount++;
              if (this.code[this.codePointer] === ']') openCount--;
            }
          } else {
            this.loopStack.push(this.codePointer);
          }
          break;
        case ']':
          if (this.memory[this.pointer] !== 0) {
            this.codePointer = this.loopStack[this.loopStack.length - 1];
          } else {
            this.loopStack.pop();
          }
          break;
      }
      this.codePointer++;
    }
    return this.output;
  }
}

// ตัวอย่างการใช้งาน
const brainfuckCode = `
++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.
`;

const interpreter = new BrainfuckInterpreter(brainfuckCode);
const output = interpreter.run();
console.log(output);
+++++++++++++++++++++++++++++++++++++++++++++++++.+++++++..+++.+++++++++++++++++++++++++++++++++++++++++++++++++.+++++++..+++.+++++++++++++++++++++++++++++++++++++++++++++++++.+++++++..+++.[-]+++++++++++++++.
>+++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++.>++++++++++++++++++++++++++++++++++++++++++++++++++.+++++++.>+++++++++++++++++++++++++++++++++++++++++++++++++++++++.>++++++++++++++++++++++++++++++++++++++++++++++++++.>+++++++++++++++.>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++.>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.>++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++++.>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++++.+++++++++++.<<<<<<<<<<<<<<<<.
